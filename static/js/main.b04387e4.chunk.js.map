{"version":3,"sources":["components/Header/HamburguerMenu/HamburguerMenu.tsx","routes/routes.ts","components/Header/NavbarDesktop/NavbarDesktop.tsx","utils/axios.ts","domain/services/Pokemon.ts","pages/PokemonDetails/GenericInterfaces.ts","Context.tsx","components/Header/Header.tsx","utils/hooks/useWindowSize.ts","components/Footer/Footer.tsx","components/ContentDetail/ContentDetail.tsx","pages/PokemonDetails/PokemonDetails.tsx","pages/ConstructionPage/ConstructionPage.tsx","components/SearchBar/SearchBar.tsx","domain/services/PokemonTypes.ts","domain/services/PokemonGenerations.ts","components/PokemonTable/PokemonTable.tsx","components/Body/Body.tsx","pages/PokemonList/PokemonList.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/tenor.gif"],"names":["HamburguerMenu","onClick","show","className","aria-label","displayName","ROUTE","NavbarDesktop","to","Client","generation","axios","get","limit","offset","then","response","data","results","map","pokemon","url","Promise","name","resolve","param","toLowerCase","id","getAllPokemonNames","a","client","names","getPokemonByGeneration","getPokemonUrlList","urls","all","getPokemonDataFrom","pokemonsDetails","sprite","sprites","front_default","height","types","Generations","Context","createContext","Provider","children","useState","theme","setTheme","pokemonList","setPokemonList","selectedGeneration","setSelectedGeneration","useEffect","value","params","Header","showModal","setShowModal","handleModal","size","isClient","window","getSize","useCallback","width","innerWidth","undefined","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener","useWindowSize","context","useContext","style","backgroundColor","Footer","ContentDetail","src","alt","type","species","weight","abilities","ability","is_hidden","stats","stat","base_stat","PokemonDetails","urlParam","useParams","PokemonURL","flag","setFlag","newPokemon","setNewPokemon","getPokemonDataFromUrlWithParams","prevState","console","log","ConstructionPage","GIF","SearchBar","randomNumber","setRandomNumber","selected","setSelected","Math","floor","random","Autocomplete","options","getOptionLabel","option","onInputChange","event","newInputValue","renderInput","TextField","label","variant","getPokemonTypes","charAt","toUpperCase","slice","getPokemonGenerations","generations","PokemonTable","isLoading","pokemonTable","selectedType","pokemonTableContent","filter","Body","setIsLoading","setType","setSelectedType","setGenerations","firstgen","secondgen","thirdgen","fourthgen","fifthgen","sixthgen","seventhgen","eigthgen","setPokemonTable","checkedGeneration","setCheckedGeneration","handleGenerationSet","length","onChange","target","typeOfPokemon","PokemonList","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b04387e4.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './HamburguerMenu.scss';\r\n\r\ninterface NabBarMobilProps {\r\n    onClick?: () => void;\r\n    show?: boolean;\r\n}\r\n\r\nexport const HamburguerMenu: React.FC<NabBarMobilProps> = ({onClick, show}) => (\r\n    <div className=\"HamburguerMenu\">\r\n        {\r\n            !show ?\r\n                <div className={'container'} aria-label=\"HamburguerMenu\" onClick={onClick}>\r\n                    <span/>\r\n                    <span/>\r\n                    <span/>\r\n                </div>:\r\n                <div className={'CloseModal'} onClick={onClick}>X</div>\r\n        }\r\n    </div>\r\n);\r\n\r\nHamburguerMenu.displayName = 'HamburguerMenu';\r\n","type typeRoute = {\r\n    Home: string;\r\n    PokemonDetails: string;\r\n    ConstructionPage: string;\r\n    PokemonList: string;\r\n};\r\n\r\nexport const ROUTE: typeRoute = {\r\n    Home: '/Pokedex-React',\r\n    PokemonDetails: '/PokemonDetails/:PokemonURL',\r\n    ConstructionPage: '/ConstructionPage',\r\n    PokemonList: '/PokemonList'\r\n};","import * as React from 'react';\r\nimport './NavbarDesktop.scss';\r\nimport {Link} from 'react-router-dom';\r\nimport {ROUTE} from '../../../routes/routes';\r\n\r\ninterface NavbarDesktopProps {\r\n    show?: boolean;\r\n    onClick?: () => void;\r\n}\r\nexport const NavbarDesktop: React.FC<NavbarDesktopProps> = ({show, onClick}) => (\r\n  <div className={!show ? 'NavbarDesktop' : 'NavbarModalShow'} onClick={onClick}>\r\n      <div className=\"NavbarLink\">\r\n          <Link to={ROUTE.Home}>\r\n              Home\r\n          </Link>\r\n      </div>\r\n      <div className=\"NavbarLink\">\r\n          <Link to={ROUTE.PokemonList}>\r\n              Pokemon List\r\n          </Link>\r\n      </div>\r\n  </div>\r\n);\r\n\r\nNavbarDesktop.displayName = 'NavbarDesktop';\r\n","import axios from 'axios';\r\nimport {GenerationsProps, PokemonList} from '../pages/PokemonDetails/GenericInterfaces';\r\n\r\n\r\nexport default class Client {\r\n   async getPokemonUrlList(generation: GenerationsProps){\r\n        return await axios.get(`https://pokeapi.co/api/v2/pokemon?limit=${generation.limit}&offset=${generation.offset}`)\r\n            .then(response => response.data.results\r\n            .map((pokemon: PokemonList) => {return pokemon.url;}));\r\n    }\r\n\r\n    async getAllPokemonNames(){\r\n        return Promise.resolve(await axios.get(`https://pokeapi.co/api/v2/pokemon?limit=805&offset=0`)\r\n            .then(response => response.data.results\r\n                .map((pokemon: PokemonList) => {return pokemon.name;})));\r\n    }\r\n\r\n    async getPokemonDataFrom(url:string){\r\n        return await axios.get(url);\r\n    }\r\n\r\n    async getPokemonDataFromUrlWithParams(param:string){\r\n        return await axios.get(`https://pokeapi.co/api/v2/pokemon/${param.toLowerCase()}`);\r\n    }\r\n\r\n    async getPokemonTypes(){\r\n        return await axios.get('https://pokeapi.co/api/v2/type').then(response => {return response.data.results;});\r\n    }\r\n\r\n    async getPokemonGenerations(){\r\n       return await axios.get('https://pokeapi.co/api/v2/generation').then(response => {return response.data.results;});\r\n    }\r\n    async getSinglePokemon(id: number){\r\n       return await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}`).then(response => {return response.data;});\r\n    }\r\n\r\n}","import Client from '../../utils/axios';\r\nimport {GenerationsProps, Pokemon} from '../../pages/PokemonDetails/GenericInterfaces';\r\nimport {PokemonTable} from '../../components/PokemonTable';\r\n\r\nexport const getAllPokemonNames = async () : Promise<string[]>=> {\r\n    const client = new Client();\r\n    const names = await client.getAllPokemonNames();\r\n    return names.map((name: string) => name);\r\n};\r\n\r\nexport const getPokemonByGeneration = async (generation: GenerationsProps): Promise<PokemonTable[]> => {\r\n    const client = new Client();\r\n    const urls = await client.getPokemonUrlList(generation);\r\n    const pokemonsDetails: Pokemon[] = await Promise.all(urls.map((url: string) => client.getPokemonDataFrom(url)));\r\n\r\n    return pokemonsDetails.map((pokemon: Pokemon): PokemonTable => ({\r\n            // @ts-ignore\r\n            sprite: pokemon.data.sprites.front_default,\r\n            name: pokemon.data.name,\r\n            height: pokemon.data.height,\r\n            id: pokemon.data.id,\r\n            types: pokemon.data.types\r\n    }));\r\n};\r\n\r\nexport const getPokemonById = async (id: number) : Promise<Pokemon> => {\r\n    const client = new Client();\r\n    return await client.getSinglePokemon(id);\r\n};","export interface Pokemon {\r\n    data: {\r\n        abilities: {\r\n            ability: NameUrl,\r\n            is_hidden: boolean,\r\n            slot: number\r\n        }[];\r\n        base_experience: number\r\n        forms: NameUrl[]\r\n        game_indices: {\r\n            game_index: number\r\n            version: NameUrl\r\n        }[]\r\n        height: number\r\n        held_items: {\r\n            item: NameUrl\r\n            version_details: {\r\n                rarity: number\r\n                version: NameUrl\r\n            }[]\r\n        }[]\r\n        id: number\r\n        is_default: boolean\r\n        location_area_encounters: string\r\n        moves: {\r\n            move: NameUrl\r\n            version_group_details: {\r\n                level_learned_at: number\r\n                move_learn_method: NameUrl\r\n                version_group: NameUrl\r\n            }[]\r\n        }[]\r\n        name: string\r\n        order: number\r\n        species: NameUrl\r\n        sprites: {\r\n            back_default: string\r\n            back_female: string\r\n            back_shiny: string\r\n            back_shiny_female: string\r\n            front_default: string\r\n            front_female: string\r\n            front_shiny: string\r\n            front_shiny_female: string\r\n        };\r\n        stats: {\r\n            base_stat: number\r\n            effort: number\r\n            stat: NameUrl\r\n        }[];\r\n        types: {\r\n            slot: number\r\n            type: NameUrl\r\n        }[]\r\n        weight: number\r\n    };\r\n}\r\n\r\nexport interface NameUrl {\r\n    name: string;\r\n    url: string;\r\n}\r\n\r\nexport interface PokemonList {\r\n    name: string;\r\n    url: string;\r\n}\r\n\r\nexport interface GenerationsProps {\r\n    limit: number;\r\n    offset: number;\r\n    name: string;\r\n}\r\n\r\nexport const Generations = {\r\n    first: {limit: 151, offset: 0, name: 'generation-i'},\r\n    second: {limit: 100, offset: 151, name: 'generation-ii'},\r\n    third: {limit: 135, offset: 251, name: 'generation-iii'},\r\n    fourth: {limit: 107, offset: 386, name: 'generation-iv'},\r\n    fifth: {limit: 156, offset: 493, name: 'generation-v'},\r\n    sixth: {limit: 72, offset: 649, name: 'generation-vi'},\r\n    seventh: {limit: 86, offset: 721, name: 'generation-vii'},\r\n    eigth: {limit: 89, offset: 807, name: 'generation-viii'},\r\n};\r\n\r\nexport interface PokemonTypes {\r\n    name: string;\r\n    url: string;\r\n}\r\n\r\nexport interface GenerationsInterface {\r\n    name: string;\r\n    url: string;\r\n}","import React, {createContext, useEffect, useState} from 'react';\r\nimport {getAllPokemonNames} from './domain/services/Pokemon';\r\nimport {Generations, GenerationsProps} from './pages/PokemonDetails/GenericInterfaces';\r\n\r\nexport interface ContextProps {\r\n    // pokemonTable: PokemonTableProps[];\r\n    pokemonList: string[];\r\n    selectedGeneration: GenerationsProps;\r\n    setSelectedGeneration: (params: GenerationsProps) => void;\r\n    theme: string;\r\n    setTheme: (param: string) => void;\r\n}\r\n\r\n// @ts-ignore\r\nexport const Context = createContext<ContextProps>();\r\n\r\n// @ts-ignore\r\nexport const Provider = ({children}) => {\r\n    const [theme, setTheme] = useState('#EF5350');\r\n    const [pokemonList, setPokemonList] = useState<string[]>([]);\r\n    const [selectedGeneration, setSelectedGeneration] = useState<GenerationsProps>({\r\n        limit: Generations.first.limit,\r\n        offset: Generations.first.offset,\r\n        name: Generations.first.name\r\n    });\r\n    useEffect(() => {\r\n        getAllPokemonNames().then(setPokemonList);\r\n    },[]);\r\n    const value = {\r\n        pokemonList,\r\n        selectedGeneration,\r\n        setSelectedGeneration: (params: GenerationsProps) => {\r\n            setSelectedGeneration(params);\r\n        },\r\n        theme,\r\n        setTheme: (param: string) => {\r\n            switch (param) {\r\n                case 'grass':\r\n                    setTheme('#7c5');\r\n                    break;\r\n                case 'poison':\r\n                    setTheme('#a59');\r\n                    break;\r\n                case 'fire':\r\n                    setTheme('#f42');\r\n                    break;\r\n                case 'flying':\r\n                    setTheme('#89f');\r\n                    break;\r\n                case 'normal':\r\n                    setTheme('#dbdbdb');\r\n                    break;\r\n                case 'water':\r\n                    setTheme('#39f');\r\n                    break;\r\n                case 'bug':\r\n                    setTheme('#ab2');\r\n                    break;\r\n                case 'dark':\r\n                    setTheme('#754');\r\n                    break;\r\n                case 'electric':\r\n                    setTheme('#fc3');\r\n                    break;\r\n                case 'psychic':\r\n                    setTheme('#f59');\r\n                    break;\r\n                case 'ground':\r\n                    setTheme('#db5');\r\n                    break;\r\n                case 'rock':\r\n                    setTheme('#ba6');\r\n                    break;\r\n                case 'fairy':\r\n                    setTheme('#e9e');\r\n                    break;\r\n                case 'steel':\r\n                    setTheme('#aab');\r\n                    break;\r\n                case 'fighting':\r\n                    setTheme('#b54');\r\n                    break;\r\n                case 'ice':\r\n                    setTheme('#6cf');\r\n                    break;\r\n                case 'ghost':\r\n                    setTheme('#66b');\r\n                    break;\r\n                case 'dragon':\r\n                    setTheme('#76e');\r\n                    break;\r\n            }\r\n        },\r\n    };\r\n\r\n    return (\r\n        <Context.Provider value={value}>\r\n            {children}\r\n        </Context.Provider>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport {useContext, useState} from 'react';\r\nimport './Header.scss';\r\nimport {HamburguerMenu} from './HamburguerMenu';\r\nimport {NavbarDesktop} from './NavbarDesktop';\r\nimport useWindowSize from '../../utils/hooks/useWindowSize';\r\nimport {Context, ContextProps} from '../../Context';\r\n\r\nexport const Header: React.FC<{}> = () => {\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    function handleModal() {\r\n        setShowModal(!showModal);\r\n    }\r\n\r\n    const size = useWindowSize();\r\n    const context = useContext<ContextProps>(Context);\r\n    return (\r\n        <div className=\"Header\" style={{backgroundColor: `${context.theme}`}}>\r\n                <div className=\"Navbar\">\r\n                    {\r\n                        // @ts-ignore\r\n                        size.width < 576 ? <NavbarDesktop show={showModal} onClick={handleModal}/> :\r\n                            <NavbarDesktop show={showModal}/>\r\n                    }\r\n                    <HamburguerMenu onClick={handleModal} show={showModal}/>\r\n                </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.displayName = 'Header';\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nexport default function useWindowSize() {\r\n    const isClient = typeof window === 'object';\r\n\r\n\r\n    const getSize = useCallback(() => {\r\n        return {\r\n            width: isClient ? window.innerWidth : undefined,\r\n            height: isClient ? window.innerHeight : undefined,\r\n        };\r\n    }, [isClient]);\r\n\r\n    const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n    // @ts-ignore\r\n    useEffect(() => {\r\n        if (!isClient) {\r\n            return false;\r\n        }\r\n\r\n        function handleResize() {\r\n            setWindowSize(getSize());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, [getSize, isClient]); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n    return windowSize;\r\n}","import * as React from 'react';\r\nimport './Footer.scss';\r\n\r\nexport const Footer: React.FC<{}> = () => (\r\n  <div className=\"Footer\">\r\n      All content & design © Pokémon Database, 2008-2020. Pokémon images & names © 1995-2020 Nintendo/Game Freak.\r\n  </div>\r\n);\r\n\r\nFooter.displayName = 'Footer';\r\n","import * as React from 'react';\r\nimport './ContentDetail.scss';\r\nimport {Pokemon} from '../../pages/PokemonDetails/GenericInterfaces';\r\n\r\ninterface ContentDetailProps {\r\n    pokemon: Pokemon;\r\n}\r\n\r\nexport const ContentDetail: React.FC<ContentDetailProps> = ({pokemon}) => {\r\n    return (\r\n        <div className=\"ContentDetail\">\r\n            <div className=\"PokemonInfo\">\r\n                <h1>Pokédex data</h1>\r\n                <div className={'PokemonImage'}>\r\n                    <img src={pokemon.data.sprites.front_default} alt=\"Imagen del pokemon\"/>\r\n                </div>\r\n                <div>\r\n                    <p>National Nº: {pokemon.data.id}</p>\r\n                    <p>Type: {\r\n                        <div>\r\n                            {pokemon.data.types.map((type: any) => (\r\n                                <div className=\"PokemonStats\">\r\n                                    <div>{type.type.name}</div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    }</p>\r\n                    <p>Species: {pokemon.data.species.name}</p>\r\n                    <p>Height: {pokemon.data.height}</p>\r\n                    <p>Weight: {pokemon.data.weight}</p>\r\n                    <p>Abilities:\r\n                        {\r\n                            <div>\r\n                                {pokemon.data.abilities.map((ability: any) => (\r\n                                    <div>{ability.is_hidden ? ability.ability.name + ' (Hidden ability)' : ability.ability.name}</div>\r\n                                ))}\r\n                            </div>\r\n                        }\r\n                    </p>\r\n                </div>\r\n                {\r\n                    <div className=\"PokemonInfo\">\r\n                        {pokemon.data.stats.map((stat: any) => (\r\n                            <div className=\"PokemonStats\">\r\n                                <div>{stat.stat.name}</div>\r\n                                <div>{stat.base_stat}</div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nContentDetail.displayName = 'ContentDetail';\r\n","import * as React from 'react';\r\nimport {useContext, useEffect, useState} from 'react';\r\nimport './styles.scss';\r\nimport {ContentDetail} from '../../components/ContentDetail';\r\nimport {useParams} from 'react-router-dom';\r\nimport '../../assets/Pokeball/pokeball-style.css';\r\nimport {Pokemon} from './GenericInterfaces';\r\nimport Client from '../../utils/axios';\r\nimport {Context} from '../../Context';\r\n\r\ninterface PokeProps {\r\n    searchTerm: string;\r\n}\r\n\r\nexport const PokemonDetails: React.FC<PokeProps> = () => {\r\n    const {PokemonURL: urlParam} = useParams();\r\n    const [flag, setFlag] = useState(false);\r\n    const [newPokemon, setNewPokemon] = useState<Pokemon>();\r\n    const context:any = useContext(Context);\r\n    useEffect(() => {\r\n        setFlag(true);\r\n        const client = new Client();\r\n        const info = client.getPokemonDataFromUrlWithParams(urlParam);\r\n        info.then((response) => {\r\n            setNewPokemon((prevState) => ({\r\n                    ...prevState, data: response.data\r\n                }\r\n            ));\r\n            setFlag(false);\r\n        });\r\n    }, [urlParam]);\r\n    context.setTheme(newPokemon?.data.types[0].type.name);\r\n    return (\r\n        <div className=\"PokemonDetails\">\r\n            {console.log(newPokemon?.data.types[0].type.name)}\r\n            {flag ? (\r\n                <div className=\"pokeball\">\r\n                    <div className=\"pokeball__button\"/>\r\n                </div>\r\n            ) : newPokemon !== undefined ? (\r\n                <ContentDetail pokemon={newPokemon}/>\r\n            ) : (\r\n                <div>me mori</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nPokemonDetails.displayName = 'PokemonDetails';\r\n","import * as React from 'react';\r\nimport GIF from '../../assets/tenor.gif';\r\n\r\nexport const ConstructionPage: React.FC<{}> = () => {\r\n    return (\r\n        <div className={'Home'}>\r\n            <img src={GIF} alt=\"Gif Pikachu construyendo\"/>\r\n        </div>\r\n    );\r\n};","/* eslint-disable no-use-before-define */\r\nimport * as React from 'react';\r\nimport {useContext, useEffect, useState} from 'react';\r\nimport './SearchBar.scss';\r\nimport {Link} from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport {Context, ContextProps} from '../../Context';\r\n\r\nexport const SearchBar: React.FC<{}> = () => {\r\n    const [randomNumber, setRandomNumber] = useState(1);\r\n    const [selected, setSelected] = useState('');\r\n    const randomNumberGenerator = () => {\r\n        setRandomNumber(Math.floor(Math.random() * 152));\r\n    };\r\n    const context = useContext<ContextProps>(Context);\r\n    //\r\n    useEffect(() => {\r\n        randomNumberGenerator();\r\n    }, []);\r\n    return (\r\n        <div className=\"SearchBar\">\r\n                <span>Search for Pokemons</span>\r\n                <div className={'Content'}>\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={context.pokemonList}\r\n                        getOptionLabel={(option) => option}\r\n                        onInputChange={(event, newInputValue) => {\r\n                            setSelected(newInputValue);\r\n                        }}\r\n                        renderInput={(params) => <TextField {...params} label=\"Combo box\" variant=\"outlined\" />}\r\n                    />\r\n                    {selected !== '' ? (\r\n                            <button className={'SearchButton'}>\r\n                                <Link to={`/PokemonDetails/${selected}`}>\r\n                                    Search\r\n                                </Link>\r\n                            </button>\r\n                        ) :\r\n                        <button className={'SearchButton'}>\r\n                            <Link to={`/PokemonDetails/${randomNumber}`}>\r\n                                Search\r\n                            </Link>\r\n                        </button>\r\n                    }\r\n                </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nSearchBar.displayName = 'SearchBar';\r\n","import Client from '../../utils/axios';\r\nimport {PokemonTypes} from '../../pages/PokemonDetails/GenericInterfaces';\r\n\r\nexport const getPokemonTypes = async (): Promise<string[]> => {\r\n    const client = new Client();\r\n    const types = await client.getPokemonTypes();\r\n    return types.map((type: PokemonTypes): string => type.name.charAt(0).toUpperCase() + type.name.slice(1) );\r\n};\r\n\r\n\r\n    // const array:string[] = [];\r\n    // client.getPokemonTypes()\r\n    //     .then(types => {\r\n    //         types.forEach((singleType: PokemonTypes) => array.push(singleType.name.charAt(0).toUpperCase() + singleType.name.slice(1))\r\n    //         );});\r\n    // return array;\r\n\r\n\r\n","import Client from '../../utils/axios';\r\nimport {GenerationsInterface} from '../../pages/PokemonDetails/GenericInterfaces';\r\n\r\nexport const getPokemonGenerations = async (): Promise<GenerationsInterface[]> => {\r\n    const client = new Client();\r\n    const generations = await client.getPokemonGenerations();\r\n    return generations.map((generation: GenerationsInterface): GenerationsInterface => generation);\r\n};\r\n\r\n\r\n","import * as React from 'react';\r\nimport './PokemonTable.scss';\r\nimport {Link} from 'react-router-dom';\r\nimport {GenerationsProps} from '../../pages/PokemonDetails/GenericInterfaces';\r\n\r\nexport interface PokemonTableProps {\r\n    isLoading: boolean;\r\n    pokemonTable: PokemonTable[] | undefined;\r\n    selectedType: string;\r\n    selectedGeneration?: GenerationsProps;\r\n}\r\n\r\nexport type PokemonTable = {\r\n    sprite: string;\r\n    name: string;\r\n    height: number;\r\n    id: number;\r\n    types: {\r\n        type: {\r\n            name: string;\r\n        }\r\n    }\r\n}[];\r\nexport const PokemonTable: React.FC<PokemonTableProps> = ({selectedGeneration,isLoading, pokemonTable, selectedType}) => {\r\n    const pokemonTableContent = (pokemon: any) => {\r\n        return(\r\n            <div className={'Filas'}>\r\n                <div>\r\n                    <Link to={`/PokemonDetails/${pokemon.name}`}>\r\n                        <img alt=\"imagen del pokemon\" src={pokemon.sprite}/>\r\n                    </Link>\r\n                </div>\r\n                <div>\r\n                    <Link to={`/PokemonDetails/${pokemon.name}`}>{pokemon.name}</Link>\r\n                </div>\r\n                <div>\r\n                    {pokemon.height/10}m\r\n                </div>\r\n                <div>\r\n                    {pokemon.id}\r\n                </div>\r\n                <div className={'types'}>\r\n                    <div className={pokemon.types[0].type.name}>{pokemon.types[0].type.name}</div>\r\n                    {pokemon.types[1] &&\r\n                    <div className={pokemon.types[1].type.name}>\r\n                        {pokemon.types[1].type.name}\r\n                    </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n    return (\r\n        <div className=\"PokemonTable\">\r\n            {!isLoading ? (\r\n                <div className={'PokemonIndexTable'}>\r\n                    <div className={'Filas'}>\r\n                        <div>Pokemon</div>\r\n                        <div>Nombre</div>\r\n                        <div>Altura</div>\r\n                        <div>Pokedex</div>\r\n                        <div>Type</div>\r\n                    </div>\r\n                    {selectedType &&\r\n                        pokemonTable?.filter((pokemon:any) => selectedType.toLowerCase() === pokemon.types[0].type.name || selectedType.toLowerCase() === pokemon.types[1]?.type.name ).map((pokemon: any) => (\r\n                            pokemonTableContent(pokemon)\r\n                    ))\r\n                    }\r\n                    {selectedType === 'all' &&\r\n                        pokemonTable?.map(pokemon => pokemonTableContent(pokemon))\r\n                    }\r\n                </div>\r\n            ) : (\r\n                <div>Cargando...</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nPokemonTable.displayName = 'PokemonTable';\r\n","import * as React from 'react';\r\nimport {useContext, useEffect, useState} from 'react';\r\nimport './Body.scss';\r\nimport {SearchBar} from '../SearchBar';\r\nimport '../../assets/Pokeball/pokeball-style.css';\r\nimport {Generations, GenerationsInterface} from '../../pages/PokemonDetails/GenericInterfaces';\r\nimport {Context, ContextProps} from '../../Context';\r\nimport {getPokemonTypes} from '../../domain/services/PokemonTypes';\r\nimport {getPokemonGenerations} from '../../domain/services/PokemonGenerations';\r\nimport {PokemonTable} from '../PokemonTable';\r\nimport {getPokemonByGeneration} from '../../domain/services/Pokemon';\r\n\r\ninterface  PokemonTableVersion2 {\r\n    firstgen: PokemonTable[];\r\n    secondgen: PokemonTable[];\r\n    thirdgen: PokemonTable[];\r\n    fourthgen: PokemonTable[];\r\n    fifthgen: PokemonTable[];\r\n    sixthgen: PokemonTable[];\r\n    seventhgen: PokemonTable[];\r\n    eigthgen: PokemonTable[];\r\n}\r\ninterface CheckGeneration {\r\n    [key : string] : boolean;\r\n}\r\nexport const Body: React.FC<{}> = () => {\r\n    const context = useContext<ContextProps>(Context);\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [type, setType] = useState<string[]>([]);\r\n    const [selectedType, setSelectedType] = useState<string>('all');\r\n    const [generations, setGenerations] = useState<GenerationsInterface[]>([]);\r\n    const [pokemonTable, setPokemonTable] = useState<PokemonTableVersion2>({firstgen: [], secondgen: [], thirdgen: [], fourthgen: [], fifthgen: [], sixthgen: [], seventhgen: [], eigthgen: []}) ;\r\n    const [checkedGeneration, setCheckedGeneration] = useState<CheckGeneration>(\r\n        {'generation-i' : false,\r\n        'generation-ii' : false,\r\n        'generation-iii' : false,\r\n        'generation-iv' : false,\r\n        'generation-v' : false,\r\n        'generation-vi' : false,\r\n        'generation-vii' : false,\r\n            'generation-viii' : false\r\n        });\r\n    useEffect(() => {\r\n        getPokemonTypes().then(setType);\r\n        getPokemonGenerations().then(setGenerations);\r\n    }, []);\r\n    useEffect(() => {\r\n        if(!checkedGeneration[context.selectedGeneration.name]){\r\n            if(!isLoading){\r\n                setIsLoading(true);\r\n            }\r\n            getPokemonByGeneration(context.selectedGeneration)\r\n                .then(response => handleGenerationSet(response))\r\n                .then(() => setIsLoading(false));\r\n        }\r\n        else{\r\n            setIsLoading(false);\r\n        }\r\n    }, [context.selectedGeneration]);\r\n    const handleGenerationSet = (response: any) => {\r\n        switch (response.length) {\r\n            case 151: setPokemonTable({...pokemonTable, firstgen: response}); setCheckedGeneration({...checkedGeneration, 'generation-i': true}); break;\r\n            case 100: setPokemonTable({...pokemonTable, secondgen: response}); setCheckedGeneration({...checkedGeneration, 'generation-ii': true}); break;\r\n            case 135: setPokemonTable({...pokemonTable, thirdgen: response}); setCheckedGeneration({...checkedGeneration, 'generation-iii': true}); break;\r\n            case 107: setPokemonTable({...pokemonTable, fourthgen: response});setCheckedGeneration({...checkedGeneration, 'generation-iv': true}); break;\r\n            case 156: setPokemonTable({...pokemonTable, fifthgen: response});setCheckedGeneration({...checkedGeneration, 'generation-v': true}); break;\r\n            case 72: setPokemonTable({...pokemonTable, sixthgen: response}); setCheckedGeneration({...checkedGeneration, 'generation-vi': true});break;\r\n            case 86: setPokemonTable({...pokemonTable, seventhgen: response});setCheckedGeneration({...checkedGeneration, 'generation-vii': true}); break;\r\n            case 89: setPokemonTable({...pokemonTable, eigthgen: response});setCheckedGeneration({...checkedGeneration, 'generation-viii': true}); break;\r\n        }\r\n    };\r\n    const setPokemonType = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setSelectedType(event.target.value);\r\n    };\r\n    const handleGenerationSelected = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        switch (event.target.value) {\r\n            case 'generation-i':\r\n                context.setSelectedGeneration({limit: Generations.first.limit, offset: Generations.first.offset, name: Generations.first.name});\r\n                break;\r\n            case 'generation-ii':\r\n                context.setSelectedGeneration({limit: Generations.second.limit, offset: Generations.second.offset, name: Generations.second.name});\r\n                break;\r\n            case 'generation-iii':\r\n                context.setSelectedGeneration({limit: Generations.third.limit, offset: Generations.third.offset, name: Generations.third.name});\r\n                break;\r\n            case 'generation-iv':\r\n                context.setSelectedGeneration({limit: Generations.fourth.limit, offset: Generations.fourth.offset, name: Generations.fourth.name});\r\n                break;\r\n            case 'generation-v':\r\n                context.setSelectedGeneration({limit: Generations.fifth.limit, offset: Generations.fifth.offset, name: Generations.fifth.name});\r\n                break;\r\n            case 'generation-vi':\r\n                context.setSelectedGeneration({limit: Generations.sixth.limit, offset: Generations.sixth.offset, name: Generations.sixth.name});\r\n                break;\r\n            case 'generation-vii':\r\n                context.setSelectedGeneration({limit: Generations.seventh.limit, offset: Generations.seventh.offset, name: Generations.seventh.name});\r\n                break;\r\n            case 'generation-viii':\r\n                context.setSelectedGeneration({limit: Generations.eigth.limit, offset: Generations.eigth.offset, name: Generations.eigth.name});\r\n                break;\r\n        }\r\n    };\r\n    const tableToReturn = () => {\r\n        if (context.selectedGeneration.name === 'generation-i') {\r\n            return pokemonTable.firstgen;\r\n        } else if (context.selectedGeneration.name === 'generation-ii') {\r\n            return pokemonTable.secondgen;\r\n        } else if (context.selectedGeneration.name === 'generation-iii') {\r\n            return pokemonTable.thirdgen;\r\n        } else if (context.selectedGeneration.name === 'generation-iv') {\r\n            return pokemonTable.fourthgen;\r\n        } else if (context.selectedGeneration.name === 'generation-v') {\r\n            return pokemonTable.fifthgen;\r\n        } else if (context.selectedGeneration.name === 'generation-vi') {\r\n            return pokemonTable.sixthgen;\r\n        } else if (context.selectedGeneration.name === 'generation-vii') {\r\n            return pokemonTable.seventhgen;\r\n        }else if (context.selectedGeneration.name === 'generation-viii') {\r\n            return pokemonTable.eigthgen;\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"Content\">\r\n            <SearchBar/>\r\n            <div className={'Selects'}>\r\n                <select name=\"TypeSelect\" id=\"TypeSelect\" onChange={setPokemonType}>\r\n                    <option value=\"all\">- Elige un tipo -</option>\r\n                    {\r\n                        type.map((typeOfPokemon: string) => <option value={typeOfPokemon}>{typeOfPokemon}</option>)\r\n                    }\r\n                </select>\r\n                <select name=\"GenerationSelect\" id=\"GenerationSelect\" onChange={handleGenerationSelected}>\r\n                    <option value=\"all\">- Elige una generacion -</option>\r\n                    {\r\n                       generations.map((generation:any) => <option value={generation.name}>{generation.name}</option>)\r\n                    }\r\n                </select>\r\n            </div>\r\n            {!isLoading ?\r\n                <PokemonTable isLoading={isLoading} selectedType={selectedType} pokemonTable={tableToReturn()} />\r\n                : <div className=\"pokeball\">\r\n                    <div className=\"pokeball__button\"/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nBody.displayName = 'Body';","import * as React from 'react';\r\nimport {Body} from '../../components/Body';\r\n\r\nexport const PokemonList: React.FC<{}> = () => {\r\n    return (\r\n        <div className={'PokemonList'}>\r\n            <Body/>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport './styles/styles.scss';\r\nimport {Header} from './components/Header';\r\nimport {Footer} from './components/Footer';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport {Home} from './pages/Home/Home';\r\nimport {PokemonDetails} from './pages/PokemonDetails/PokemonDetails';\r\nimport {ROUTE} from './routes/routes';\r\nimport {ConstructionPage} from './pages/ConstructionPage/ConstructionPage';\r\nimport {PokemonList} from './pages/PokemonList/PokemonList';\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <main className={'main'}>\r\n                    <Header/>\r\n                    <Switch>\r\n                        <Route exact path={ROUTE.Home} component={PokemonList}/>\r\n                        <Route exact path={ROUTE.PokemonDetails} component={PokemonDetails}/>\r\n                        <Route exact path={ROUTE.ConstructionPage} component={ConstructionPage}/>\r\n                        <Route exact path={ROUTE.PokemonList} component={PokemonList}/>\r\n                    </Switch>\r\n                </main>\r\n                <Footer/>\r\n            </div>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Body is cached for offline use.\" message.\r\n              console.log('Body is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from './Context';\r\n\r\nReactDOM.render(\r\n    <Provider>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/tenor.83592060.gif\";"],"sourceRoot":""}